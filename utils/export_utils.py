from datetime import datetime
from typing import Dict

def export_summaries(summaries: Dict[str, str], format: str = "text") -> str:
    """
    Export chapter summaries in the specified format.
    
    Args:
        summaries (Dict[str, str]): Dictionary of chapter titles and their summaries
        format (str): Export format - "text" or "markdown"
    
    Returns:
        str: Formatted content ready for download
    """
    if format == "text":
        return export_as_text(summaries)
    elif format == "markdown":
        return export_as_markdown(summaries)
    else:
        raise ValueError(f"Unsupported export format: {format}")

def export_as_text(summaries: Dict[str, str]) -> str:
    """
    Export summaries as plain text format.
    
    Args:
        summaries (Dict[str, str]): Dictionary of chapter titles and their summaries
    
    Returns:
        str: Plain text formatted content
    """
    content = []
    
    # Add header
    content.append("PDF CHAPTER SUMMARIES")
    content.append("=" * 50)
    content.append(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    content.append(f"Total chapters: {len(summaries)}")
    content.append("")
    
    # Add table of contents
    content.append("TABLE OF CONTENTS")
    content.append("-" * 20)
    for i, title in enumerate(summaries.keys(), 1):
        content.append(f"{i}. {title}")
    content.append("")
    content.append("=" * 50)
    content.append("")
    
    # Add summaries
    for i, (title, summary) in enumerate(summaries.items(), 1):
        content.append(f"{i}. {title.upper()}")
        content.append("-" * len(f"{i}. {title}"))
        content.append("")
        content.append(summary)
        content.append("")
        content.append("-" * 50)
        content.append("")
    
    # Add footer
    content.append(f"End of summaries - Generated by PDF Chapter Summarizer")
    
    return "\n".join(content)

def export_as_markdown(summaries: Dict[str, str]) -> str:
    """
    Export summaries as markdown format.
    
    Args:
        summaries (Dict[str, str]): Dictionary of chapter titles and their summaries
    
    Returns:
        str: Markdown formatted content
    """
    content = []
    
    # Add header
    content.append("# ðŸ“š PDF Chapter Summaries")
    content.append("")
    content.append(f"**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    content.append(f"**Total chapters:** {len(summaries)}")
    content.append("")
    
    # Add table of contents
    content.append("## ðŸ“‹ Table of Contents")
    content.append("")
    for i, title in enumerate(summaries.keys(), 1):
        # Create anchor link
        anchor = title.lower().replace(' ', '-').replace(':', '').replace('.', '')
        content.append(f"{i}. [{title}](#{anchor})")
    content.append("")
    content.append("---")
    content.append("")
    
    # Add summaries
    for i, (title, summary) in enumerate(summaries.items(), 1):
        # Create anchor for linking
        anchor = title.lower().replace(' ', '-').replace(':', '').replace('.', '')
        
        content.append(f"## {i}. {title} {{#{anchor}}}")
        content.append("")
        content.append(summary)
        content.append("")
        content.append("---")
        content.append("")
    
    # Add footer
    content.append("*Generated by PDF Chapter Summarizer*")
    
    return "\n".join(content)

def create_summary_metadata(summaries: Dict[str, str]) -> Dict:
    """
    Create metadata about the summaries for export.
    
    Args:
        summaries (Dict[str, str]): Dictionary of chapter titles and their summaries
    
    Returns:
        Dict: Metadata information
    """
    total_words = sum(len(summary.split()) for summary in summaries.values())
    avg_words_per_chapter = total_words // len(summaries) if summaries else 0
    
    return {
        "total_chapters": len(summaries),
        "total_words": total_words,
        "average_words_per_chapter": avg_words_per_chapter,
        "generation_timestamp": datetime.now().isoformat(),
        "chapter_titles": list(summaries.keys())
    }

def export_with_metadata(summaries: Dict[str, str], format: str = "markdown") -> str:
    """
    Export summaries with additional metadata.
    
    Args:
        summaries (Dict[str, str]): Dictionary of chapter titles and their summaries
        format (str): Export format - "text" or "markdown"
    
    Returns:
        str: Formatted content with metadata
    """
    metadata = create_summary_metadata(summaries)
    
    if format == "markdown":
        content = []
        content.append("# ðŸ“š PDF Chapter Summaries")
        content.append("")
        content.append("## ðŸ“Š Summary Statistics")
        content.append("")
        content.append(f"- **Total Chapters:** {metadata['total_chapters']}")
        content.append(f"- **Total Words:** {metadata['total_words']:,}")
        content.append(f"- **Average Words per Chapter:** {metadata['average_words_per_chapter']:,}")
        content.append(f"- **Generated:** {datetime.fromisoformat(metadata['generation_timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("")
        
        # Add the regular export content
        regular_content = export_as_markdown(summaries)
        # Skip the first line (header) since we already added it
        content.extend(regular_content.split('\n')[2:])
        
        return '\n'.join(content)
    
    else:  # text format
        content = []
        content.append("PDF CHAPTER SUMMARIES - DETAILED REPORT")
        content.append("=" * 60)
        content.append("")
        content.append("SUMMARY STATISTICS")
        content.append("-" * 20)
        content.append(f"Total Chapters: {metadata['total_chapters']}")
        content.append(f"Total Words: {metadata['total_words']:,}")
        content.append(f"Average Words per Chapter: {metadata['average_words_per_chapter']:,}")
        content.append(f"Generated: {datetime.fromisoformat(metadata['generation_timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("")
        
        # Add the regular export content
        regular_content = export_as_text(summaries)
        # Skip the first few lines since we already added header
        lines = regular_content.split('\n')
        start_index = next(i for i, line in enumerate(lines) if line.strip() == "TABLE OF CONTENTS")
        content.extend(lines[start_index:])
        
        return '\n'.join(content)
